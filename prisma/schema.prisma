// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String?       @unique
  passedMissionCnt Int           @default(6)
  totalMissionCnt  Int           @default(10)
  accuracy         Float         @default(0.6)
  hashedPassword   String?
  balance          Decimal       @default(0) @db.Money
  createdAt        DateTime      @default(now())
  isAdmin          Boolean       @default(false)
  emailVerified    DateTime?
  image            String?
  userMissions     UserMission[]
  accounts         Account[]
  sessions         Session[]
}

model UserMission {
  missionId String
  email     String
  status    MissionStatus
  User      User?         @relation(fields: [email], references: [email])

  @@id([missionId, email])
}

model Image {
  id               String          @id
  url              String          @unique
  width            Int?
  height           Int?
  filename         String?
  flickrUrl        String?
  cocoUrl          String?
  createdAt        DateTime        @default(now())
  Mission          Mission?        @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId        String?
  cocoAnnotation   CocoAnnotation? @relation(fields: [cocoAnnotationId], references: [id], onDelete: Cascade)
  cocoAnnotationId String?
}

model Mission {
  id                   String          @id @default(cuid())
  imagesIds            String[]
  title                String
  cocoAnnotation       CocoAnnotation?
  // cocoAnnotationId String
  publisherEmail       String
  recipientEmail       String?
  multiRecipientEmails String[]        @default(["_"])
  recipientsCnt        Int             @default(0)
  passedCnt            Int             @default(0)
  rejectedCnt          Int             @default(0)
  reviewerEmail        String?
  mainCategories       String[]        @default(["_"])
  createdAt            DateTime        @default(now())
  updatedAt            DateTime?       @updatedAt
  description          String?         @db.Text
  comment              String?         @db.Text
  reviewBySystem       Boolean         @default(true)
  status               MissionStatus   @default(PENDING_ACCEPT)
  reward               Decimal?        @db.Money
  insFileName          String?
  images               Image[]
}

enum MissionStatus {
  PENDING_ACCEPT
  ONGOING
  PENDING_REVIEW
  PENDING_IMPROVE
  PASSED
  REJECTED
  COMPLETED
}

model CocoAnnotation {
  id            String       @id @default(cuid())
  info          Info?
  licenses      License[]
  images        Image[]
  annotations   Annotation[]
  // categories  Category[]
  categoriesIds Int[]
  mission       Mission      @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId     String       @unique
}

model W3CAnnotation {
  id                 String           @id
  imageId            String           @unique
  defaultAnnotations Json?
  userAnnotations    UserAnnotation[]
  annotations        Annotation[]
}

model UserAnnotation {
  imageId         String
  email           String
  w3cAnnotations  Json?
  bIoU            Float?
  reviewPassed    Boolean?
  score           Float
  w3CAnnotation   W3CAnnotation? @relation(fields: [w3CAnnotationId], references: [imageId])
  w3CAnnotationId String?

  @@id([imageId, email])
}

// 从 W3C 格式转化而来
model Annotation {
  id               Int             @id @default(autoincrement())
  imageId          String
  categoryId       Int
  segmentation     Segmentation    @default(RLE)
  area             Float
  // bbox             BBox?
  xMin             Float
  yMin             Float
  width            Float
  height           Float
  isCrowd          Boolean
  cocoAnnotation   CocoAnnotation? @relation(fields: [cocoAnnotationId], references: [id], onDelete: Cascade)
  cocoAnnotationId String?
  w3cAnnotation    W3CAnnotation?  @relation(fields: [w3cAnnotationId], references: [id], onDelete: Cascade)
  w3cAnnotationId  String?
}

enum Segmentation {
  RLE
  POLYGON
}

// model BBox {
//   xmin         Float
//   ymin         Float
//   width        Float
//   height       Float
//   annotation   Annotation @relation(fields: [annotationId], references: [id])
//   annotationId Int        @id @unique
// }

model Info {
  id               String         @id @default(cuid())
  year             Int
  createdAt        DateTime       @default(now())
  version          String
  description      String         @db.Text
  contributor      String
  url              String?
  cocoAnnotation   CocoAnnotation @relation(fields: [cocoAnnotationId], references: [id], onDelete: Cascade)
  cocoAnnotationId String         @unique
}

model Category {
  id            Int     @id
  name          String?
  supercategory String?
  // CocoAnnotation   CocoAnnotation? @relation(fields: [cocoAnnotationId], references: [id])
  // cocoAnnotationId String?
}

model License {
  id               String          @id @default(cuid())
  name             String?
  url              String?
  cocoAnnotation   CocoAnnotation? @relation(fields: [cocoAnnotationId], references: [id], onDelete: Cascade)
  cocoAnnotationId String?
}

model Statistic {
  missionId   String   @id
  createdAt   DateTime @default(now())
  publisherId String
  recipientId String?
  profit      Decimal  @db.Money
}
